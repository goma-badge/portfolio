n=12
e=1e-10

az=[[-4,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 1, -4,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  1, -4,  0,  0,  1,  0,  0,  0,  0,  0,  0],
    [ 1,  0,  0, -4,  1,  0,  1,  0,  0,  0,  0,  0],
    [ 0,  1,  0,  1, -4,  1,  0,  1,  0,  0,  0,  0],
    [ 0,  0,  1,  0,  1, -4,  0,  0,  1,  0,  0,  0],
    [ 0,  0,  0,  1,  0,  0, -4,  1,  0,  1,  0,  0],
    [ 0,  0,  0,  0,  1,  0,  1, -4,  1,  0,  1,  0],
    [ 0,  0,  0,  0,  0,  1,  0,  1, -4,  0,  0,  1],
    [ 0,  0,  0,  0,  0,  0,  1,  0,  0, -4,  1,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  1,  0,  1, -4,  1],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1, -4]]

ag=[[-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
    [1,-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    [0,1,-4,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [1,0,0,-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
    [0,1,0,1,-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
    [0,0,1,0,1,-4,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
    [0,0,0,1,0,0,-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
    [0,0,0,0,1,0,1,-4,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0],
    [0,0,0,0,0,1,0,1,-4,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,0,0,1,0,0,-4,1,0,0,0,0,0,0,0,0,0,0,1,0,0],
    [0,0,0,0,0,0,0,1,0,1,-4,1,0,0,0,0,0,0,0,0,0,0,1,0],
    [0,0,0,0,0,0,0,0,1,0,1,-4,0,0,0,0,0,0,0,0,0,0,0,1]]

b=[-100,-100,-100,0,0,0,0,0,0,100,100,100]
xz=[0,0,0,0,0,0,0,0,0,0,0,0]
xg=[0,0,0,0,0,0,0,0,0,0,0,0]

def gous(az,b,xz):
    while (1):
        M=0
        for i in range (0,n):
            S=0
            for j in range(0,n):
                S+=az[i][j]*xz[j]
            X=(b[i]-S+az[i][i]*xz[i])/az[i][i]
            if abs((X-xz[i])/X)<e:
                M+=1
            xz[i]=X
        if(M==n):
            break

def gyaku(ag,b,xg):
    for k in range(0,n):
        cdash=ag[k][k]
        for j in range(0,2*n):
            ag[k][j]=ag[k][j]/cdash
        for i in range(0,n):
            if i==k:
                continue
            cdash=ag[i][k]
            for j in range(k,2*n):
                ag[i][j]=ag[i][j]-ag[k][j]*cdash
    for i in range(0,n):
        xg[i]=0
        for j in range(0,n):
            xg[i]=xg[i]+ag[i][n+j]*b[j]

gous(az,b,xz)
gyaku(ag,b,xg)
print('ガウスザイデル法\n'+str(xz))
print('逆行列\n'+str(xg))